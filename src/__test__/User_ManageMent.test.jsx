import { describe, test, expect, vi, } from "vitest";
import { fireEvent, render ,screen,} from "@testing-library/react";
import { Pagination_User_manageMent } from "../components/Pagination_User_manageMent";
import { UserManagement } from "../pages/UserManagement";
import React from "react";



vi.mock("axios");
vi.stubGlobal('scrollTo', vi.fn());


    // Generated by Qodo Gen

describe('Pagination_User_manageMent', () => {

    // Navigation to next page increments current page when not at last page
test('should increment current page when next button clicked and not on last page', () => {
      const setCurrentPage = vi.fn();
      const props = {
        totalPages: 5,
        currentPage: 3,
        setCurrentPage: setCurrentPage
      };

      const { getByTestId } = render(<Pagination_User_manageMent {...props} />);

      // Get the next button by its test ID
      const nextButton = getByTestId('next-button_userManagement');
      fireEvent.click(nextButton);

      expect(setCurrentPage).toHaveBeenCalledWith(4);
    });

    // Prevent navigation beyond first page when on page 1
test('should not decrement page when prev button clicked on first page', () => {
      const setCurrentPage = vi.fn();
      const props = {
        totalPages: 5,
        currentPage: 1,
        setCurrentPage: setCurrentPage
      };

      const { getByTestId } = render(<Pagination_User_manageMent {...props} />);

      const prevButton = getByTestId('prev-button_userManagement');
      fireEvent.click(prevButton);

      expect(setCurrentPage).not.toHaveBeenCalled();
    });


    // Navigation to previous page decrements current page when not at first page
test('should decrement current page when previous button clicked and not on first page', () => {
        const setCurrentPage = vi.fn();
        const props = {
          totalPages: 5,
          currentPage: 3,
          setCurrentPage: setCurrentPage
        };
        const { getByTestId } = render(<Pagination_User_manageMent {...props} />);
        const prevButton = getByTestId('prev-button_userManagement')
        fireEvent.click(prevButton);
  
        expect(setCurrentPage).toHaveBeenCalledWith(2);
      });


    // Component displays current page number and total pages correctly
 test('should display current page and total pages correctly', () => {
        const setCurrentPage = vi.fn();
        const props = {
          totalPages: 10,
          currentPage: 5,
          setCurrentPage: setCurrentPage
        };
        const { getByText } = render(<Pagination_User_manageMent {...props} />);
        expect(getByText('5')).toBeInTheDocument();
        expect(getByText('of')).toBeInTheDocument();
        expect(getByText('10')).toBeInTheDocument();
      });

     // Component renders navigation buttons and page indicators in correct layout
 test('should render navigation buttons and page indicators correctly', () => {
        const setCurrentPage = vi.fn();
        const props = {
          totalPages: 5,
          currentPage: 3,
          setCurrentPage: setCurrentPage
        };
  
        const { getByTestId, getByText } = render(<Pagination_User_manageMent {...props} />);
  
        const prevButton = getByTestId('prev-button_userManagement')
        const nextButton = getByTestId('next-button_userManagement')
        const currentPageIndicator = getByText('3');
        const totalPagesIndicator = getByText('5');
  
        expect(prevButton).toBeInTheDocument();
        expect(nextButton).toBeInTheDocument();
        expect(currentPageIndicator).toBeInTheDocument();
        expect(totalPagesIndicator).toBeInTheDocument();
      });

    // Handle invalid currentPage values outside valid range
test('should not change current page when currentPage is less than 1', () => {
        const setCurrentPage = vi.fn();
        const props = {
          totalPages: 5,
          currentPage: 0,
          setCurrentPage: setCurrentPage
        };
  
        const { getByTestId } = render(<Pagination_User_manageMent {...props} />);
  
        const prevButton = getByTestId('prev-button_userManagement')
        fireEvent.click(prevButton);
  
        expect(setCurrentPage).not.toHaveBeenCalled();
      });




    });


describe("UserManageMent",()=>{
        // Empty users array handling
        test('should render empty state when users array is empty', () => {
            const { queryByTestId } = render(<UserManagement users={[]} />);
  
            // Check for the empty state
            const emptyState = queryByTestId('user-ManageMenttt-0');
            expect(emptyState).toBeInTheDocument();
          });


          
})